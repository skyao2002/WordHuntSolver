{"version":3,"sources":["Components/Grid.js","Components/GridForm.js","Components/ArrowGrid.js","Components/AllWords.js","App.js","serviceWorker.js","index.js"],"names":["Grid","props","size","letters","grid","console","log","Math","round","sqrt","length","i","j","charAt","setGrid","map","row","indexR","Row","key","value","indexC","Col","className","GridForm","ArrowGrid","directions","Array","isArray","points","r1","floor","c1","r2","x1","y1","x2","y2","push","xmlns","viewBox","cx","cy","r","stroke","strokeWidth","fill","id","markerWidth","markerHeight","refX","refY","orient","markerEnd","AllWords","words","xs","sm","md","lg","App","useState","setLetters","setDirections","currWord","setCurrWord","currIdx","setCurrIdx","allDirections","setAllDirections","url","useEffect","axios","post","then","response","data","answer","error","Navbar","bg","variant","Brand","href","Container","Jumbotron","Button","onClick","nextClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5c68cdd0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport './Grid.css'\r\n// import Arrow from '@elsdoerfer/react-arrow';\r\n\r\nfunction Grid(props) {\r\n    let letters = props.letters\r\n    let grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\r\n    let size\r\n    setGrid(letters);\r\n\r\n    function setGrid(letters) {\r\n        console.log(\"set grid called \" + letters)\r\n        if(letters == null) {\r\n            grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\r\n            size = 4\r\n            return;\r\n        }\r\n        size = Math.round(Math.sqrt(letters.length))\r\n        for(let i = 0; i < size; i++) {\r\n            for(let j = 0; j < size; j++) {\r\n                grid[i][j] = letters.charAt(i*size+j)\r\n            } \r\n        }\r\n        console.log(\"set grid to values\")\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {grid.map((row, indexR) => (\r\n                <Row key={indexR}>\r\n                    {row.map((value, indexC) => (\r\n                        <Col className='p-1' key={indexR * size +indexC}>\r\n                            <div className='square' >\r\n                                <h1 className='text-center letter'>{value}</h1>\r\n                            </div>\r\n                            \r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;\r\n","import React, { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport $ from \"jquery\";\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button' \r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nfunction GridForm(props) {\r\n    return(\r\n        <h1>hi</h1>\r\n    )\r\n    // const ALPHA_START = 65;\r\n    // const ALPHA_END = 90;\r\n    // const currWord = props.currWord\r\n    // const size = props.size\r\n\r\n    // let emptyString = \"\"\r\n    // for(let i = 0; i < Math.pow(size, 2); i++) {\r\n    //     emptyString+= \" \"\r\n    // }\r\n    \r\n    // const { register, handleSubmit , errors} = useForm();\r\n    // const [ letters, setLetters ] = useState(emptyString);\r\n\r\n    // const onSubmit = (data) => {\r\n    //     let combinedString = \"\"\r\n    //     for(let i = 0; i < Math.pow(size, 2); i++) {\r\n    //         let currValue = document.getElementsByName(\"letter\")[i].value;\r\n    //         if(currValue.toUpperCase() == currValue.toLowerCase()) {\r\n    //             //not a letter\r\n    //             return (\r\n    //                 <h1>You did not enter a character in one of the fields. Refresh the page</h1>\r\n    //             )\r\n    //         }\r\n    //         combinedString += currValue.toUpperCase()\r\n    //     }\r\n    //     setLetters(combinedString);\r\n    //     props.onClick(combinedString);\r\n    // }\r\n\r\n    // const onNext = () => {\r\n    //     props.nextClick()\r\n    // }\r\n\r\n    // const autoTab = e => {\r\n    //     // let tabindex = $(e.target).attr(\"tabindex\") || 0;\r\n        \r\n    //     // tabindex = Number(tabindex);\r\n    //     // let currValue = document.getElementsByName(\"letter\")[tabindex].value;\r\n    //     // console.log(currValue)\r\n    //     // if (e.keyCode >= ALPHA_START && e.keyCode <= ALPHA_END && currValue !== \"\") {\r\n    //     //   tabindex += 1;\r\n    //     // }\r\n    //     // const elem = $(\"[tabindex=\" + tabindex + \"]\");\r\n    //     // if (elem[0]) {\r\n    //     //   elem.focus();\r\n    //     // }\r\n    // };\r\n      \r\n\r\n    // if(currWord == null)\r\n    //     return (\r\n    //         <Form id='forms' className='py-3 text-center' onSubmit={handleSubmit(onSubmit)}>\r\n    //             <table className=\"table table-bordered\" \r\n    //                 name=\"values\" \r\n    //                 ref={register({\r\n    //                     required: \"Enter something!\", \r\n    //                     minLength: {value: 16, message: \"Too short\"},\r\n    //                     maxLength: {value: 16, message: \"Too long\"}\r\n    //                 })}>\r\n    //                 <tbody>\r\n    //                     {Array.from({ length: size }).map((_, row) => (\r\n    //                         <tr key={row}>\r\n    //                             {Array.from({ length: size }).map((_, col) => (\r\n    //                                 <td key={row*size+col}>\r\n    //                                     <input placeholder={letters.charAt(row*size+col)} maxLength=\"1\" name=\"letter\" ref={register({required: true})} id={row*size+col} tabIndex={row*size+col} onKeyUp={autoTab} type=\"text\" style={{width: .15 + 'em'}, {height: 2.15+'em'}} />\r\n    //                                 </td>\r\n    //                             ))}\r\n    //                         </tr>\r\n    //                     ))}\r\n    //                 </tbody>\r\n    //             </table>\r\n    //             {errors.letter && <p>Some values are not filled</p>}\r\n    //             <p>To reset all, refresh the page</p>\r\n    //             <Button type='submit' tabIndex={Math.pow(size,2)} variant=\"dark\" size='lg'>Set Grid!</Button>\r\n    //         </Form>\r\n    //     )\r\n    // else\r\n    //     return (\r\n    //         <div>\r\n    //             <Form id='forms' className='py-3 text-center' onSubmit={handleSubmit(onSubmit)}>\r\n    //                 <Row>\r\n    //                     <Col lg=\"9\">\r\n    //                         <table className=\"table table-bordered\" \r\n    //                             name=\"values\" \r\n    //                             ref={register({\r\n    //                                 required: \"Enter something!\", \r\n    //                                 minLength: {value: 16, message: \"Too short\"},\r\n    //                                 maxLength: {value: 16, message: \"Too long\"}\r\n    //                             })}>\r\n    //                             <tbody>\r\n    //                                 {Array.from({ length: size }).map((_, row) => (\r\n    //                                     <tr key={row}>\r\n    //                                         {Array.from({ length: size }).map((_, col) => (\r\n    //                                             <td key={row*size+col}>\r\n    //                                                 <input defaultValue={letters.charAt(row*size+col)} maxLength=\"1\" name=\"letter\" ref={register({required: true})} id={row*size+col} tabIndex={row*size+col} onKeyUp={autoTab} type=\"text\" style={{width: .15 + 'em'},{height: 2.15+'em'}} />\r\n    //                                             </td>\r\n    //                                         ))}\r\n    //                                     </tr>\r\n    //                                 ))}\r\n    //                             </tbody>\r\n    //                         </table>\r\n    //                     </Col>\r\n    //                     <Col lg=\"3\">\r\n    //                         {errors.letter && <p>Some values are not filled</p>}\r\n    //                         <p>To reset all, refresh the page</p>\r\n    //                         <Button type='submit' tabIndex={Math.pow(size,2)} variant=\"dark\" size='lg'>Set Grid!</Button>\r\n    //                     </Col>\r\n    //                 </Row>\r\n                \r\n    //             </Form>\r\n\r\n    //             <form className=\"text-center p-3\" name = \"next\">\r\n    //                 <p>current word: </p> <h1> {currWord} </h1>\r\n    //                 <br/>\r\n    //                 <Button variant=\"dark\" onClick={() => onNext()}>Next Word!</Button>\r\n    //                 <p>Click once and then use SPACE or ENTER</p>\r\n    //             </form>\r\n                \r\n    //         </div>\r\n    //     )\r\n}\r\n\r\nexport default GridForm;\r\n","import React from 'react'\r\n\r\nfunction ArrowGrid(props) {\r\n  let directions = props.directions\r\n  let size = props.size\r\n  console.log(directions.length)\r\n\r\n  if(Array.isArray(directions) && directions.length == 0){\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n\r\n  let points = []\r\n  let r1 = Math.floor(directions[0]/size);\r\n  let c1 = directions[0]%size;\r\n  for(let i = 1; i < directions.length; i++) {\r\n    let r2 = Math.floor(directions[i]/size)\r\n    let c2 = directions[i]%size\r\n\r\n    let x1 = (c1)*100 + 50;\r\n    let y1 = (r1)*100 + 50;\r\n    let x2 = (c2)*100 + 50;\r\n    let y2 = (r2)*100 + 50;\r\n\r\n    points.push([x1, y1, x2, y2]);\r\n    console.log(x1, y1, x2, y2)\r\n\r\n    r1 = Math.floor(directions[i]/size)\r\n    c1 = directions[i]%size\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 400\" className='mt-2'>\r\n        <circle cx={points[0][0]} cy={points[0][1]} r=\"15\" stroke=\"black\" strokeWidth=\"3\" fill=\"red\" />\r\n        <defs>\r\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \r\n          refX=\"0\" refY=\"3.5\" orient=\"auto\" >\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#ffcc99\" stroke=\"black\"/>\r\n          </marker>\r\n        </defs>\r\n\r\n        {points.map((row, indexR) => (\r\n          <line x1={row[0]} y1={row[1]} x2={row[2]} y2={row[3]} stroke=\"#990000\" \r\n          strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" key={indexR}/>\r\n        ))}\r\n        {/* <line x1=\"50\" y1=\"50\" x2=\"250\" y2=\"50\" stroke=\"#000\" \r\n        strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\r\n        <line x1=\"200\" y1=\"150\" x2=\"250\" y2=\"50\" stroke=\"#000\" \r\n        strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" /> */}\r\n      </svg>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default ArrowGrid","import React from 'react';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nfunction AllWords(props) {\r\n    let words = props.words\r\n\r\n    if(Array.isArray(words) && words.length == 0)\r\n        return(\r\n            <div></div>\r\n        )\r\n    else {\r\n        return(\r\n            <div className=\"border border-dark rounded\">\r\n                <h3>All Words</h3>\r\n                <Row>\r\n                    {words.map((row, indexR) => (\r\n                        <Col key={row} xs=\"6\" sm=\"4\" md=\"3\" lg=\"2\">\r\n                            {row[0]}\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AllWords;\r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Grid from './Components/Grid'\nimport GridForm from './Components/GridForm'\nimport ArrowGrid from './Components/ArrowGrid'\nimport AllWords from './Components/AllWords'\nimport axios from 'axios'\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nfunction App() {\n  const [letters, setLetters] = useState(null)\n  const [directions, setDirections] = useState([])\n  const [currWord, setCurrWord] = useState(null)\n  const [currIdx, setCurrIdx] = useState(0)\n  const [size, setSize] = useState(4)\n  const [allDirections, setAllDirections] = useState([])\n\n  const url = 'https://stevenyao.pythonanywhere.com/solve_this/'\n  //const url = 'http://127.0.0.1:8000/solve_this/'\n  useEffect(() => {\n    if(letters != null) {\n      axios.post(url, {\n        \"letters\": letters,\n        \"size\": size\n      })\n      .then(response => {\n        setAllDirections(response.data.answer)\n      }, (error) => {\n        console.log(error);\n      });\n    }\n    setCurrIdx(0)\n  }, [url, letters])\n\n  useEffect(() => {\n    if(letters != null && allDirections != []) {\n      setDirections(allDirections[currIdx][1])\n      setCurrWord(allDirections[currIdx][0])\n      setCurrIdx(currIdx+1)\n      // document.getElementsByName(\"next\")[0].style.display = 'block';\n    }\n  }, [allDirections])\n\n\n  const handleClick = (data) => {\n    setLetters(data)\n  }\n  const handleNext = () => {\n    if(letters != null) {\n      setDirections(allDirections[currIdx][1])\n      setCurrWord(allDirections[currIdx][0])\n      setCurrIdx(currIdx+1)\n    }\n  }\n\n  return (\n    <div className=\"bg-light\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\" className='pl-3'>\n          Word Hunt Solver\n        </Navbar.Brand>\n      </Navbar>\n      \n\n      <Container className='p-3 bg-white'>\n      <Jumbotron>\n        <h1>Never Lose WordHunt Again!</h1>\n        <p>\n          Simply enter the 16 letters of your word hunt board and watch as the solutions magically appear. Check out my YouTube for more quality content:\n        </p>\n        <Button href=\"https://www.youtube.com/channel/UCZDp6CvSxKBEKycW4dpHIJQ\" variant=\"dark\" size='lg'>Go to YouTube</Button>\n      </Jumbotron>\n\n      <Row>\n        <Col md='6'>\n          <h1 className='text-center'>\n            Enter your letters\n          </h1>\n          <GridForm onClick = {handleClick} nextClick = {handleNext} currWord= {currWord} size = {size}/>\n        </Col>\n\n        <Col md='6'>\n          \n          <div className=\"parent px-1\">\n            <Grid letters = {letters} />\n            <div className=\"child\">\n              <ArrowGrid directions = {directions} size = {size}/>\n            </div>\n          </div>\n          \n        </Col>\n      </Row>\n      <div className='mt-3'>\n        <AllWords words={allDirections}/>\n      </div>\n      \n      \n    </Container>\n    <footer className=\"bg-dark text-light text-center text-xs p-3 absolute bottom-0 w-full to-bottom\">\n            &copy; Copyright Steven Yao 2020\n    </footer>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}