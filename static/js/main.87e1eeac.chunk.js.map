{"version":3,"sources":["Components/Grid.js","Components/GridForm.js","Components/ArrowGrid.js","Components/AllWords.js","App.js","serviceWorker.js","index.js"],"names":["Grid","props","size","letters","grid","console","log","Math","round","sqrt","length","i","j","charAt","setGrid","map","row","indexR","Row","key","value","indexC","Col","className","GridForm","currWord","useForm","register","handleSubmit","errors","onSubmit","data","combinedString","pow","currValue","document","getElementsByName","toUpperCase","toLowerCase","onClick","autoTab","e","tabindex","$","target","attr","Number","keyCode","elem","focus","Form","id","Array","from","_","col","placeholder","maxLength","name","ref","required","tabIndex","onKeyUp","type","style","height","letter","Button","variant","lg","defaultValue","nextClick","ArrowGrid","directions","isArray","points","r1","floor","c1","r2","x1","y1","x2","y2","push","xmlns","viewBox","cx","cy","r","stroke","strokeWidth","fill","markerWidth","markerHeight","refX","refY","orient","markerEnd","AllWords","words","xs","sm","md","App","useState","file","setFile","setLetters","setDirections","setCurrWord","currIdx","setCurrIdx","allDirections","setAllDirections","url","useEffect","Navbar","bg","Brand","href","Container","Jumbotron","axios","post","then","response","answer","error","handleSolveLetters","preventDefault","formData","FormData","append","accept","onChange","files","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.87e1eeac.chunk.js","sourcesContent":["import React from 'react';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport './Grid.css'\r\n// import Arrow from '@elsdoerfer/react-arrow';\r\n\r\nfunction Grid(props) {\r\n    let letters = props.letters\r\n    let grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\r\n    let size\r\n    setGrid(letters);\r\n\r\n    function setGrid(letters) {\r\n        console.log(\"set grid called \" + letters)\r\n        if(letters == null) {\r\n            grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\r\n            size = 4\r\n            return;\r\n        }\r\n        size = Math.round(Math.sqrt(letters.length))\r\n        for(let i = 0; i < size; i++) {\r\n            for(let j = 0; j < size; j++) {\r\n                grid[i][j] = letters.charAt(i*size+j)\r\n            } \r\n        }\r\n        console.log(\"set grid to values\")\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {grid.map((row, indexR) => (\r\n                <Row key={indexR}>\r\n                    {row.map((value, indexC) => (\r\n                        <Col className='p-1' key={indexR * size +indexC}>\r\n                            <div className='square' >\r\n                                <h1 className='text-center letter'>{value}</h1>\r\n                            </div>\r\n                            \r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;\r\n","import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport $ from \"jquery\";\r\n\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nfunction GridForm(props) {\r\n  const ALPHA_START = 65;\r\n  const ALPHA_END = 90;\r\n  const currWord = props.currWord;\r\n  const size = props.size;\r\n\r\n  const { register, handleSubmit, errors } = useForm();\r\n  // const [ letters, setLetters ] = useState(\"\");\r\n\r\n  const onSubmit = (data) => {\r\n    let combinedString = \"\";\r\n    for (let i = 0; i < Math.pow(size, 2); i++) {\r\n      let currValue = document.getElementsByName(\"letter\")[i].value;\r\n      if (currValue.toUpperCase() == currValue.toLowerCase()) {\r\n        //not a letter\r\n        return (\r\n          <h1>\r\n            You did not enter a character in one of the fields. Refresh the page\r\n          </h1>\r\n        );\r\n      }\r\n      combinedString += currValue.toUpperCase();\r\n    }\r\n    // setLetters(combinedString);\r\n    props.onClick(combinedString);\r\n  };\r\n\r\n  const onNext = () => {\r\n    props.nextClick();\r\n  };\r\n\r\n  const autoTab = (e) => {\r\n    let tabindex = $(e.target).attr(\"tabindex\") || 0;\r\n\r\n    tabindex = Number(tabindex);\r\n    let currValue = document.getElementsByName(\"letter\")[tabindex].value;\r\n    console.log(currValue);\r\n    if (\r\n      e.keyCode >= ALPHA_START &&\r\n      e.keyCode <= ALPHA_END &&\r\n      currValue !== \"\"\r\n    ) {\r\n      tabindex += 1;\r\n    }\r\n    const elem = $(\"[tabindex=\" + tabindex + \"]\");\r\n    if (elem[0]) {\r\n      elem.focus();\r\n    }\r\n  };\r\n\r\n  if (currWord == null)\r\n    return (\r\n      <Form\r\n        id=\"forms\"\r\n        className=\"py-3 text-center\"\r\n        onSubmit={handleSubmit(onSubmit)}\r\n      >\r\n        <table className=\"table table-bordered\">\r\n          <tbody>\r\n            {Array.from({ length: size }).map((_, row) => (\r\n              <tr key={row}>\r\n                {Array.from({ length: size }).map((_, col) => (\r\n                  <td key={row * size + col}>\r\n                    <input\r\n                      placeholder={props.letters.charAt(row * size + col)}\r\n                      maxLength=\"1\"\r\n                      name=\"letter\"\r\n                      ref={register({ required: true })}\r\n                      id={row * size + col}\r\n                      tabIndex={row * size + col}\r\n                      onKeyUp={autoTab}\r\n                      type=\"text\"\r\n                      style={({ width: 0.15 + \"em\" }, { height: 2.15 + \"em\" })}\r\n                    />\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        {errors.letter && <p>Some values are not filled</p>}\r\n        <p>To reset all, refresh the page</p>\r\n        <Button\r\n          type=\"submit\"\r\n          tabIndex={Math.pow(size, 2)}\r\n          variant=\"dark\"\r\n          size=\"lg\"\r\n        >\r\n          Set Grid!\r\n        </Button>\r\n      </Form>\r\n    );\r\n  else\r\n    return (\r\n      <div>\r\n        <Form\r\n          id=\"forms\"\r\n          className=\"py-1 text-center\"\r\n          onSubmit={handleSubmit(onSubmit)}\r\n        >\r\n          <Row>\r\n            <Col lg=\"9\">\r\n              <table className=\"table table-bordered\">\r\n                <tbody>\r\n                  {Array.from({ length: size }).map((_, row) => (\r\n                    <tr key={row}>\r\n                      {Array.from({ length: size }).map((_, col) => (\r\n                        <td key={row * size + col}>\r\n                          <input\r\n                            defaultValue={props.letters.charAt(\r\n                              row * size + col\r\n                            )}\r\n                            maxLength=\"1\"\r\n                            name=\"letter\"\r\n                            ref={register({ required: true })}\r\n                            id={row * size + col}\r\n                            tabIndex={row * size + col}\r\n                            onKeyUp={autoTab}\r\n                            type=\"text\"\r\n                            style={\r\n                              ({ width: 0.15 + \"em\" }, { height: 2.15 + \"em\" })\r\n                            }\r\n                          />\r\n                        </td>\r\n                      ))}\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </Col>\r\n            <Col lg=\"3\">\r\n              {errors.letter && <p>Some values are not filled</p>}\r\n              <p>To reset all, refresh the page</p>\r\n              <Button\r\n                type=\"submit\"\r\n                tabIndex={Math.pow(size, 2)}\r\n                variant=\"dark\"\r\n                size=\"lg\"\r\n              >\r\n                Set Grid!\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n\r\n        <form className=\"text-center\" name=\"next\">\r\n          <p>current word: </p> <h1> {currWord} </h1>\r\n          <br />\r\n          <Button variant=\"dark\" onClick={() => onNext()}>\r\n            Next Word!\r\n          </Button>\r\n          <p>Click once and then use SPACE or ENTER</p>\r\n        </form>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default GridForm;\r\n","import React from 'react'\r\n\r\nfunction ArrowGrid(props) {\r\n  let directions = props.directions\r\n  let size = props.size\r\n\r\n  if(Array.isArray(directions) && directions.length == 0){\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n\r\n  let points = []\r\n  let r1 = Math.floor(directions[0]/size);\r\n  let c1 = directions[0]%size;\r\n  for(let i = 1; i < directions.length; i++) {\r\n    let r2 = Math.floor(directions[i]/size)\r\n    let c2 = directions[i]%size\r\n\r\n    let x1 = (c1)*100 + 50;\r\n    let y1 = (r1)*100 + 50;\r\n    let x2 = (c2)*100 + 50;\r\n    let y2 = (r2)*100 + 50;\r\n\r\n    points.push([x1, y1, x2, y2]);\r\n    console.log(x1, y1, x2, y2)\r\n\r\n    r1 = Math.floor(directions[i]/size)\r\n    c1 = directions[i]%size\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 400\" className='mt-2'>\r\n        <circle cx={points[0][0]} cy={points[0][1]} r=\"15\" stroke=\"black\" strokeWidth=\"3\" fill=\"red\" />\r\n        <defs>\r\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \r\n          refX=\"0\" refY=\"3.5\" orient=\"auto\" >\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#ffcc99\" stroke=\"black\"/>\r\n          </marker>\r\n        </defs>\r\n\r\n        {points.map((row, indexR) => (\r\n          <line x1={row[0]} y1={row[1]} x2={row[2]} y2={row[3]} stroke=\"#990000\" \r\n          strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" key={indexR}/>\r\n        ))}\r\n        {/* <line x1=\"50\" y1=\"50\" x2=\"250\" y2=\"50\" stroke=\"#000\" \r\n        strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\r\n        <line x1=\"200\" y1=\"150\" x2=\"250\" y2=\"50\" stroke=\"#000\" \r\n        strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" /> */}\r\n      </svg>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default ArrowGrid","import React from 'react';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nfunction AllWords(props) {\r\n    let words = props.words\r\n\r\n    if(Array.isArray(words) && words.length == 0)\r\n        return(\r\n            <div></div>\r\n        )\r\n    else {\r\n        return(\r\n            <div className=\"border border-dark rounded\">\r\n                <h3>All Words</h3>\r\n                <Row>\r\n                    {words.map((row, indexR) => (\r\n                        <Col key={row} xs=\"6\" sm=\"4\" md=\"3\" lg=\"2\">\r\n                            {row[0]}\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default AllWords;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Grid from \"./Components/Grid\";\nimport GridForm from \"./Components/GridForm\";\nimport ArrowGrid from \"./Components/ArrowGrid\";\nimport AllWords from \"./Components/AllWords\";\nimport axios from \"axios\";\n\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction App() {\n  const [file, setFile] = useState(null);\n  const [letters, setLetters] = useState(\"\");\n  const [directions, setDirections] = useState([]);\n  const [currWord, setCurrWord] = useState(null);\n  const [currIdx, setCurrIdx] = useState(0);\n  const [size, setSize] = useState(4);\n  const [allDirections, setAllDirections] = useState([]);\n\n  const url = \"https://stevenyaooo.pythonanywhere.com\";\n  // const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n  // const url = \"http://127.0.0.1:5000\";\n\n  const handleSolveFile = (e) => {\n    e.preventDefault();\n    if (file) {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n      axios.post(`${url}/solveimg`, formData).then(\n        (response) => {\n          setLetters(response.data.letters);\n          setAllDirections(response.data.answer);\n        },\n        (error) => {\n          console.log(error);\n        }\n      );\n      setCurrIdx(0);\n    }\n  };\n\n  // handles the solve with the grid\n  function handleSolveLetters(letters) {\n    if (letters != \"\") {\n      setLetters(letters);\n      axios\n        .post(`${url}/solve`, {\n          letters: letters,\n          size: size,\n        })\n        .then(\n          (response) => {\n            setAllDirections(response.data.answer);\n          },\n          (error) => {\n            console.log(error);\n          }\n        );\n      setCurrIdx(0);\n    }\n  }\n  // useEffect(() => {\n  //   if (letters != \"\") {\n  //     axios\n  //       .post(`${url}/solve`, {\n  //         letters: letters,\n  //         size: size,\n  //       })\n  //       .then(\n  //         (response) => {\n  //           setAllDirections(response.data.answer);\n  //         },\n  //         (error) => {\n  //           console.log(error);\n  //         }\n  //       );\n  //   }\n  //   setCurrIdx(0);\n  // }, [url, letters]);\n\n  useEffect(() => {\n    if (letters != \"\" && allDirections != []) {\n      setDirections(allDirections[currIdx][1]);\n      setCurrWord(allDirections[currIdx][0]);\n      setCurrIdx(currIdx + 1);\n      // document.getElementsByName(\"next\")[0].style.display = 'block';\n    }\n  }, [allDirections]);\n\n  const handleClick = (data) => {\n    // setLetters(data);\n    handleSolveLetters(data);\n  };\n  const handleNext = () => {\n    if (letters != \"\") {\n      setDirections(allDirections[currIdx][1]);\n      setCurrWord(allDirections[currIdx][0]);\n      setCurrIdx(currIdx + 1);\n    }\n  };\n  const handleFileChange = (e) => {\n    if (e.target.files[0]) {\n      setFile(e.target.files[0]);\n    }\n  };\n  return (\n    <div className=\"bg-light\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\" className=\"pl-3\">\n          Word Hunt Solver\n        </Navbar.Brand>\n      </Navbar>\n\n      <Container className=\"p-3 bg-white\">\n        <Jumbotron>\n          <h1>Never Lose WordHunt Again!</h1>\n          <p>\n            Simply enter the 16 letters of your word hunt board and watch as the\n            solutions magically appear. Check out my YouTube for more quality\n            content:\n          </p>\n          <Button\n            href=\"https://www.youtube.com/channel/UCZDp6CvSxKBEKycW4dpHIJQ\"\n            variant=\"dark\"\n            size=\"lg\"\n          >\n            Go to YouTube\n          </Button>\n        </Jumbotron>\n\n        <Row>\n          <Col md=\"6\">\n            <h1 className=\"text-center\">Enter your letters</h1>\n            <GridForm\n              onClick={handleClick}\n              nextClick={handleNext}\n              currWord={currWord}\n              size={size}\n              letters={letters}\n            />\n            {!letters && (\n              <form onSubmit={handleSolveFile}>\n                <div className=\"text-center\">\n                  <h3>Or upload/take pic:</h3>\n                  <div className=\"text-nowrap\">\n                    <input\n                      type=\"file\"\n                      accept=\"image/*\"\n                      name=\"file\"\n                      onChange={handleFileChange}\n                      className=\"w-75\"\n                    />\n                    <input type=\"submit\" className=\"w-25\" />\n                  </div>\n                </div>\n              </form>\n            )}\n          </Col>\n\n          <Col md=\"6\">\n            <div className=\"parent px-1\">\n              <Grid letters={letters} />\n              <div className=\"child\">\n                <ArrowGrid directions={directions} size={size} />\n              </div>\n            </div>\n          </Col>\n        </Row>\n        <div className=\"mt-3\">\n          <AllWords words={allDirections} />\n        </div>\n      </Container>\n      <footer className=\"bg-dark text-light text-center text-xs p-3 absolute bottom-0 w-full to-bottom\">\n        &copy; Copyright Steven Yao 2020\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}