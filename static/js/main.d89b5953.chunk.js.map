{"version":3,"sources":["Components/Grid.js","Components/GridForm.js","Components/ArrowGrid.js","App.js","serviceWorker.js","index.js"],"names":["Grid","props","size","letters","grid","console","log","Math","round","sqrt","length","i","j","charAt","setGrid","map","row","indexR","Row","key","value","indexC","Col","className","GridForm","useForm","register","handleSubmit","errors","currWord","onSubmit","data","onClick","values","toUpperCase","Form","Group","Control","type","placeholder","name","ref","required","minLength","message","maxLength","Button","variant","nextClick","ArrowGrid","directions","points","r1","floor","c1","r2","x1","y1","x2","y2","push","xmlns","viewBox","id","markerWidth","markerHeight","refX","refY","orient","fill","stroke","strokeWidth","markerEnd","App","useState","setLetters","setDirections","setCurrWord","currIdx","setCurrIdx","allDirections","setAllDirections","url","useEffect","axios","post","then","response","answer","error","Navbar","bg","Brand","href","Container","Jumbotron","md","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.d89b5953.chunk.js","sourcesContent":["import React from 'react';\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\nimport './Grid.css'\r\n// import Arrow from '@elsdoerfer/react-arrow';\r\n\r\nfunction Grid(props) {\r\n    let letters = props.letters\r\n    let grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\r\n    let size\r\n    setGrid(letters);\r\n\r\n    function setGrid(letters) {\r\n        console.log(\"set grid called \" + letters)\r\n        if(letters == null) {\r\n            grid = [[\"\", \"\", \"\", \"\"], [\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"],[\"\", \"\", \"\", \"\"]]\r\n            size = 4\r\n            return;\r\n        }\r\n        size = Math.round(Math.sqrt(letters.length))\r\n        for(let i = 0; i < size; i++) {\r\n            for(let j = 0; j < size; j++) {\r\n                grid[i][j] = letters.charAt(i*size+j)\r\n            } \r\n        }\r\n        console.log(\"set grid to values\")\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {grid.map((row, indexR) => (\r\n                <Row key={indexR}>\r\n                    {row.map((value, indexC) => (\r\n                        <Col className='p-1' key={indexR * size +indexC}>\r\n                            <div className='square' >\r\n                                <h1 className='text-center letter'>{value}</h1>\r\n                            </div>\r\n                            \r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;\r\n","import React from 'react';\r\nimport { useForm } from 'react-hook-form';\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nfunction GridForm(props) {\r\n    const { register, handleSubmit , errors} = useForm();\r\n    const currWord = props.currWord\r\n\r\n    const onSubmit = (data) => {\r\n        props.onClick(data.values.toUpperCase());\r\n    }\r\n\r\n    const onNext = () => {\r\n        props.nextClick()\r\n    }\r\n\r\n    if(currWord == null)\r\n        return (\r\n            <Form className='py-3 text-center' onSubmit={handleSubmit(onSubmit)}>\r\n                <Form.Group>\r\n                <Form.Control \r\n                    size=\"lg\" \r\n                    type=\"text\" \r\n                    placeholder=\"Type here\" \r\n                    name=\"values\" \r\n                    ref={register({\r\n                        required: \"Enter something!\", \r\n                        minLength: {value: 16, message: \"Too short\"},\r\n                        maxLength: {value: 16, message: \"Too long\"}\r\n                    })}\r\n                />\r\n                {errors.values && <p>{errors.values.message}</p>}\r\n                </Form.Group>\r\n\r\n                <Button type='submit' variant=\"dark\" size='lg'>Go!</Button>\r\n            </Form>\r\n        )\r\n    else\r\n        return (\r\n            <div>\r\n                <Form className='py-3 text-center' onSubmit={handleSubmit(onSubmit)}>\r\n                    <Form.Group>\r\n                    <Form.Control \r\n                        size=\"lg\" \r\n                        type=\"text\" \r\n                        placeholder=\"Type here\" \r\n                        name=\"values\" \r\n                        ref={register({\r\n                            required: \"Enter something!\", \r\n                            minLength: {value: 16, message: \"Too short\"},\r\n                            maxLength: {value: 16, message: \"Too long\"}\r\n                        })}\r\n                    />\r\n                    {errors.values && <p>{errors.values.message}</p>}\r\n                    </Form.Group>\r\n\r\n                    <Button type='submit' variant=\"dark\" size='lg'>Go!</Button>\r\n                    \r\n                </Form>\r\n                <br />\r\n                <br />\r\n                <Form className=\"text-center p-3\">\r\n                    <p className=\"\">current word: </p> <h1 className=''> {currWord} </h1>\r\n                    <br/>\r\n                    <Button variant=\"dark\" size='lg' onClick={() => onNext()}>Next Word!</Button>\r\n                    {/* <div onClick={() => onNext()} className=\"d-inline p-2 bg-dark text-white align-items-center\" flexDirection='column' >Next Word</div> */}\r\n                </Form>\r\n                \r\n            </div>\r\n        )\r\n}\r\n\r\nexport default GridForm;\r\n","import React from 'react'\r\nimport Arrow from '@elsdoerfer/react-arrow';\r\n\r\nfunction ArrowGrid(props) {\r\n  let directions = props.directions\r\n  let size = props.size\r\n  console.log(directions.length)\r\n\r\n  if(directions.length == 0) {\r\n    return (\r\n      <div></div>\r\n    )\r\n  }\r\n\r\n  let points = []\r\n  let r1 = Math.floor(directions[0]/size);\r\n  let c1 = directions[0]%size;\r\n  for(let i = 1; i < directions.length; i++) {\r\n    let r2 = Math.floor(directions[i]/size)\r\n    let c2 = directions[i]%size\r\n\r\n    let x1 = (c1)*100 + 50;\r\n    let y1 = (r1)*100 + 50;\r\n    let x2 = (c2)*100 + 50;\r\n    let y2 = (r2)*100 + 50;\r\n\r\n    points.push([x1, y1, x2, y2]);\r\n    console.log(x1, y1, x2, y2)\r\n\r\n    r1 = Math.floor(directions[i]/size)\r\n    c1 = directions[i]%size\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 400 400\" className='mt-2'>\r\n        <defs>\r\n          <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" \r\n          refX=\"0\" refY=\"3.5\" orient=\"auto\" >\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#ffcc99\" stroke=\"black\"/>\r\n          </marker>\r\n        </defs>\r\n\r\n        {points.map((row, indexR) => (\r\n          <line x1={row[0]} y1={row[1]} x2={row[2]} y2={row[3]} stroke=\"#990000\" \r\n          strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" key={indexR}/>\r\n        ))}\r\n        {/* <line x1=\"50\" y1=\"50\" x2=\"250\" y2=\"50\" stroke=\"#000\" \r\n        strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" />\r\n        <line x1=\"200\" y1=\"150\" x2=\"250\" y2=\"50\" stroke=\"#000\" \r\n        strokeWidth=\"2\" markerEnd=\"url(#arrowhead)\" /> */}\r\n      </svg>\r\n    </div>\r\n    \r\n  )\r\n}\r\n\r\nexport default ArrowGrid","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Grid from './Components/Grid'\nimport GridForm from './Components/GridForm'\nimport ArrowGrid from './Components/ArrowGrid'\nimport axios from 'axios'\n\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\n\nfunction App() {\n  const [letters, setLetters] = useState(null)\n  const [directions, setDirections] = useState([])\n  const [currWord, setCurrWord] = useState(null)\n  const [currIdx, setCurrIdx] = useState(0)\n  const [size, setSize] = useState(4)\n  const [allDirections, setAllDirections] = useState([])\n\n  const url = 'https://stevenyao.pythonanywhere.com/solve_this/'\n  //const url = 'http://127.0.0.1:8000/solve_this/'\n  useEffect(() => {\n    if(letters != null) {\n      axios.post(url, {\n        \"letters\": letters,\n        \"size\": size\n      })\n      .then(response => {\n        setAllDirections(response.data.answer)\n      }, (error) => {\n        console.log(error);\n      });\n    }\n    setCurrIdx(0)\n  }, [url, letters])\n\n  useEffect(() => {\n    if(letters != null && typeof allDirections != []) {\n      setDirections(allDirections[currIdx][1])\n      setCurrWord(allDirections[currIdx][0])\n      setCurrIdx(currIdx+1)\n    }\n  }, [allDirections])\n\n\n  const handleClick = (data) => {\n    setLetters(data)\n  }\n  const handleNext = () => {\n    if(letters != null) {\n      setDirections(allDirections[currIdx][1])\n      setCurrWord(allDirections[currIdx][0])\n      setCurrIdx(currIdx+1)\n    }\n  }\n\n  return (\n    <div className=\"bg-light\">\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\" className='pl-3'>\n          Word Hunt Solver\n        </Navbar.Brand>\n      </Navbar>\n      \n\n      <Container className='p-3 bg-white'>\n      <Jumbotron>\n        <h1>Never Lose WordHunt Again!</h1>\n        <p>\n          Simply enter the 16 letters of your word hunt board and watch as the solutions magically appear. Check out my YouTube for more quality content:\n        </p>\n        <Button href=\"https://www.youtube.com/channel/UCZDp6CvSxKBEKycW4dpHIJQ\" variant=\"dark\" size='lg'>Go to YouTube</Button>\n      </Jumbotron>\n\n      <Row>\n        <Col md='6'>\n          <h1 className='text-center'>\n            Enter your letters\n          </h1>\n          <GridForm onClick = {handleClick} nextClick = {handleNext} currWord= {currWord}/>\n        </Col>\n\n        <Col md='6'>\n          <div className=\"parent px-1\">\n            <Grid  letters = {letters}/>\n            <div className=\"child\">\n              <ArrowGrid directions = {directions} size = {size}/>\n            </div>\n          </div>\n          \n        </Col>\n      </Row>\n      \n    </Container>\n    <footer className=\"bg-dark text-light text-center text-xs p-3 absolute bottom-0 w-full to-bottom\">\n            &copy; Copyright Steven Yao 2020\n    </footer>\n    </div>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}